# Copyright 2023 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "backend.conf"

# This is the main configuration file for the application.
# ~~~~~

appName = phone-number

play.filters.enabled += "play.filters.headers.SecurityHeadersFilter"

play.filters.enabled += "play.filters.cors.CORSFilter"
play.filters.cors {
  allowedOrigins = ["http://localhost:9680"]
}

# Default http client
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientModule"

# Default http client
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientV2Module"

# Internal auth module
play.modules.enabled += "uk.gov.hmrc.internalauth.client.modules.InternalAuthModule"

# Json error handler
play.http.errorHandler = "uk.gov.hmrc.cipphonenumber.controllers.CIRJsonErrorHandler"

# Play Modules
# ~~~~
# Additional play modules can be added here

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes

http.timeout = 30000

# Microservice specific config

microservice {
  services {
    cipphonenumber {
      verification {
        protocol = http
        host = localhost
        port = 6083
        auth-token = fake-token
        circuit-breaker {
          service-name = "Verification service"
          max-failures  = 2
          call-timeout  = 1 minute
          reset-timeout = 1 minute
          max-reset-timeout = 2 minutes
          exponential-backoff-factor = 2.0
          random-factor = 0.2
        }
      }
    }
    internal-auth {
      host = localhost
      port = 6099
    }
  }
}
